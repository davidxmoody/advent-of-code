let input = ["prtkqyluibmtcwqaezjmhgfndx", "prtkqylusbsmcwvaezjmhgfndt", "prgkqyluibsocwvamzjmhgkndx", "prjkqyluibsocwvahzjmhgfnsx", "prtkqylcibsocwvzezjohgfndx", "prtkqyluiksocwziezjmhgfndx", "prikqyluiksocwvaezjmkgfndx", "prtkgyluibsocwvwezjehgfndx", "prtkqyluiysocwvaezjghxfndx", "prtkqwluibsoxwvaezjmhgfhdx", "prtkqylgibsocwvabzjmhzfndx", "prtknyltibnocwvaezjmhgfndx", "prdkqyluibrocwvaezjmhgnndx", "prtwqyluibsoctvcezjmhgfndx", "mrtkqyluibgocwvakzjmhgfndx", "prtkqaouibsocwvaezjmhwfndx", "prtkqyluihjocwvaezjmhgfpdx", "prtkqyluikfxcwvaezjmhgfndx", "prtkqybuixsocwvaczjmhgfndx", "pvtkayluibsocwxaezjmhgfndx", "grtkqgluibsocdvaezjmhgfndx", "prlkqyluibsochvaezjmhgzndx", "prtkqylxibsocmvaezjmhgfkdx", "prtkqyluibsqctvaezjmpgfndx", "putkqyluibsocqvaezjmhgfndw", "prtjqyluibsiclvaezjmhgfndx", "prtkqylvpvsocwvaezjmhgfndx", "prnkqyluibsocwvaezjmhefsdx", "prtktyluibsocwvaezjkhgrndx", "prtkqyluibcovwvaezjthgfndx", "prtkqcluibiocwvaezjmhggndx", "prtkqyluihsocwveezjmhgfydx", "prtklyluibsocwqaszjmhgfndx", "prtkqyluibsocwvaezjmfznndx", "prtkjyluijsocwvaeejmhgfndx", "prtkqtluibsonwvaexjmhgfndx", "prtkqyluinsocwbaezjmjgfndx", "prtkqyluibslckvaezjmhgyndx", "prtkqyluibsodwlpezjmhgfndx", "prtkquluibsfcwvaezjhhgfndx", "prtkqyluhbsocweaezsmhgfndx", "prrkqyluinsocxvaezjmhgfndx", "prtkqyluibsoswvaezjmhgyqdx", "prtkqbluibdocwvlezjmhgfndx", "prtkqyfuibsocpvaezjmhgfnwx", "prtkqlluibsqjwvaezjmhgfndx", "prtkqyluibrocwvaehjmjgfndx", "prtkqyluibsoowvaezgmhgendx", "wrtjqyluibsocwvaezfmhgfndx", "prtvqyluhbsocwvaezjmtgfndx", "prtkqyllibspcwvaezjmkgfndx", "pqtzqyeuibsocwvaezjmhgfndx", "prtkqyluibsolpvaezjmegfndx", "przkayguibsocwvaezjmhgfndx", "prtkqyluidsocwvaezjmyufndx", "prtuqyluibsocwvaezjmfgfnkx", "prtkqwluibsrcwvaezjchgfndx", "prtkqyluibsotwhaozjmhgfndx", "erwkqylhibsocwvaezjmhgfndx", "prtkqyluibsocwvgezjmkgfedx", "prskqyluiesocwvaezjmggfndx", "prtkqylmitsocwvaezjmhgfnox", "prtkqyluinnocwvaezjmhgfkdx", "prtktyluibsokwvaezjmhgfcdx", "prtkqyluibsomwvakvjmhgfndx", "prtkqyltibloawvaezjmhgfndx", "prtkqyluibxocwvaezgmhgqndx", "prtkqyluibskcmvaezjmhgfngx", "artkqylubbsotwvaezjmhgfndx", "prtkqyluibzocwvhezjmhgfnbx", "prskqkluibsocwvaezjmhgfjdx", "prtkqyluibwocwvaezjkhglndx", "prukqyluissocwvzezjmhgfndx", "puhkqyluibsocwvaezjmhgfsdx", "qrtkqyluibsocwvaeujmhgfndd", "prtkqyluibsoctvaezjmagfnda", "prtkquluibsocwkaezjmhgfqdx", "prtkqyluubswcwvaezjmhvfndx", "prfkqyluibsocwvaemrmhgfndx", "pmtkqyluibpocwvaezjmhggndx", "prtkqvluibiocwvaezjqhgfndx", "prtkgypuibsocwvaezcmhgfndx", "prtpqyquibsovwvaezjmhgfndx", "prtwqyluiasocwvaexjmhgfndx", "mrtzqyluibbocwvaezjmhgfndx", "prtkqyluibsocwmaegwmhgfndx", "prtkqyluibvncwvaqzjmhgfndx", "prtkqyluiusocwvaezjmhmfbgx", "prtkqyljibvocwvaezjehgfndx", "prtkqyloibsopavaezjmhgfndx", "prckqyakibsocwvaezjmhgfndx", "prtkqyluibsdcwvaezjmngfddx", "prekqylupbsocwvaezemhgfndx", "hrtkqyluibhocwvaezjmhgfnde", "prmkqyluibsocwvaezzfhgfndx", "prtkqyluiccfcwvaezjmhgfndx", "pdtkqyluxbsocwvaezjmhgendx", "prokqyluibsocwvuezjmsgfndx", "prtkqyluibsacwvaezjyhgfndv", "prtkqmluibsocavaezjmhgfndc", "prtkqyluibsocwvmezjmhgtnqx", "prtkqytuibiocyvaezjmhgfndx", "pktkqyiuibsocwvwezjmhgfndx", "grtrqyluibsocwvaezjmhgfbdx", "prtkqylsibjocwvaezjmhgfnyx", "prtkqyhutbsocwvaexjmhgfndx", "prtknyluibsocmvaezumhgfndx", "prtkwyluibsocwvahzjmhgpndx", "prtkqywuibsolhvaezjmhgfndx", "prtkcyluibsoccvaezjthgfndx", "prtkqyrdibsocwvaezjbhgfndx", "prtkqyhuqbsocwvaezjmhgfxdx", "pytkqyluibsocwvagzjmhgfndv", "prtkqyliibsocwvaexwmhgfndx", "prtkqyluibshcwvaeljphgfndx", "prtkqyluibsocwvaerjzhbfndx", "prtkqyduibsocwvaezvmhgfnzx", "drtkqylhibsocwvaezjmhmfndx", "prtkqyluibsocwvaezamfvfndx", "brtkqyluqbsocwvaezjmhgpndx", "prtkqyiuibsocwvuezjmhgfngx", "urtkqyluibsocqvaeljmhgfndx", "prtkqyluikaocwvaezjmhgfjdx", "prqkqzouibsocwvaezjmhgfndx", "prtkqyluibsocxvaezjmhgfnxv", "prlkqyluibsoxwvaeijmhgfndx", "prthuyluibsocwvaezjmhgfnhx", "potkqyluizsocwvaezjmhifndx", "fstkqyduibsocwvaezjmhgfndx", "prtkqxluibsocwvaezjmhgffdm", "prtkqylpibsozwvaezmmhgfndx", "prxkqylbibsocwvaezjphgfndx", "srtkqyluibsicnvaezjmhgfndx", "prtktyluibsocwvaezjvhgfnax", "pctkqyluxbsocwvaezwmhgfndx", "prtkqylusbsoclvaezsmhgfndx", "pwtkqyluibsocrvaezjmggfndx", "prtkqyluibswcwraezjmhgfndd", "prtkqyluibtocwiaezjmhgfnax", "prtuqyluibsocwvajzjmngfndx", "pwtkqyluibsocwvaerjmogfndx", "petkqexuibsocwvaezjmhgfndx", "pztkqyluibsocwvaerqmhgfndx", "prtkqyluobsocwvaezjmapfndx", "prtkqyluiinocwvaeljmhgfndx", "prtkqyluibsoowvxezjmhgfnnx", "lrtkqyluibsocwvfezjmhgfndc", "prtkqyluibokcwvahzjmhgfndx", "prtkqmlufbsocwvaegjmhgfndx", "prtkqylribsocwvanzjmhgfnda", "prtkqyluibspxwvaezkmhgfndx", "prtiqyluibsbcwvaezjmhgfntx", "prikqzluinsocwvaezjmhgfndx", "prtkqnldibsocwvaezjmhxfndx", "prtkqyluixsocsvaezjmhwfndx", "hrtkqyluibsocwvaezjhhgfodx", "prtkqyluibsrcwvaezjmhpfwdx", "prtkqyluibsocwyaezjmhgffdk", "prtkqyluidsocwvalmjmhgfndx", "prukquluabsocwvaezjmhgfndx", "prckqyluinsmcwvaezjmhgfndx", "prbkqymuibsocwvaezjmhgfndc", "prtkfylaibsocwvaezjmkgfndx", "zrtkqyluibsocwvrbzjmhgfndx", "crtkqyluibsocwvaejjmkgfndx", "prttqyluibsocyvaezymhgfndx", "prtkqylugbsocwvaezjxhgfmdx", "prtkqyluibsocwdlezjmhgfnbx", "prtkqjluibsocwvaozjhhgfndx", "prtcjyluibsocwbaezjmhgfndx", "rrtkqyluiblocwvaezjmhgundx", "prtkkyluibsocwfaezjmhgfnyx", "prtkqyuuibsocwvaezjmhgfogx", "prtkyyluvbsocwvaezjmhgfnox", "prpkqyluibyocwvaezjmhggndx", "pdtkqyluibdocwvaezjmhgfndy", "prtklysuibsocwvaezjmhgfnwx", "prtkqyluabsouwvaekjmhgfndx", "phtkqyluibsocwvaezjmhgfnxt", "prtkqyxuibsocwvaezjmhpfnqx", "prtkqyluibsodwsaezdmhgfndx", "prtkbyluibsohwvaezjmhgfndr", "xrtkqylhibsocwvtezjmhgfndx", "prtkqyluvysocwvaezbmhgfndx", "prtkqieuibsocwvaeojmhgfndx", "pctkqyluibsocwvanzjmhgfnux", "vrtkqyluibsozwvaezjmhgandx", "prtkqyluiusocwvaezjmhmfngx", "prbkqyluibsockvaxzjmhgfndx", "prtkqyluibsonwvaczjmhgfndi", "prtkqyluiblocwvaezjmhgfnau", "prtkqyluibsocwvafzuchgfndx", "prdkqyluiysocwvaezjmhgfnax", "prnkqyouibsocwvaezjmhgfndq", "mrtkqgluibsocwvpezjmhgfndx", "pvtkqyluibsocwvaczjmhgnndx", "trtkqwluibsohwvaezjmhgfndx", "prmkqyluibsofwvaezjmhgfrdx", "prtyqyluibpdcwvaezjmhgfndx", "ertkqylulbsocwvaezjmhgfnax", "prtkqyluibsacwvaeijmhgfndf", "prtkqyluibyocwvapzjmhgpndx", "potkqyluibgocwvaezjmhzfndx", "prtkqyluibsocwyaezxmhgfnpx", "prtkqkjuibsncwvaezjmhgfndx", "prtqqyluibsocwlaezjmhgkndx", "prtkxyluibnocwvaezjmhgkndx", "prtkqyluiosocwvapzjmxgfndx", "prtkqylumbsocwvyezimhgfndx", "prukqyluibsocwvyezjmhgindx", "prtkqylbibstcwvaezjxhgfndx", "pctkqyuuibsocwvaezjuhgfndx", "vrtkqyluibsocwvaezjmhgfnll", "urtkqyluibsopwvaezjphgfndx", "prtkceluibsocwvaepjmhgfndx", "prwkxyluibsocwvaezjmhgfnzx", "prtkqyluitsocwvaezqzhgfndx", "prtkqkauibsorwvaezjmhgfndx", "prtkqyluibsocwvaezfmftfndx", "prtkiybuibsocwvaezjkhgfndx", "prtkzyluibsocwgaezjmvgfndx", "prtkqyluibsocwvaezjmhgqnxg", "prtkqyluimsocwvauzjwhgfndx", "prtkqyluibsacwgaezjmhgfndd", "pwtkuyluibsccwvaezjmhgfndx", "prtkqyluibsoawvaezjmvgfnlx", "prtkqyluabsocwwaezjmhgftdx", "patkqylnibsocwvaezjmhgfnox", "prtkqyluibsocwlaxzkmhgfndx", "pbtkqpluibsfcwvaezjmhgfndx", "prtkqyluibsoywsaezjmhgxndx", "prtkqyluibfocwvaezjyhgfhdx", "pltbqylcibsocwvaezjmhgfndx", "prtkdyluiisocwvvezjmhgfndx", "prtkqkxuibsokwvaezjmhgfndx", "prtkqyluibsoawvaezzmhgfndm", "petkqyluibsgcwvaezjmhgfndu", "prtkqyluibsoyxvaezjmlgfndx", "prtkqyluibxocwvaezgmhnfndx", "prtkikluibsocwvwezjmhgfndx", "prbkqyluibsocwvaezjhhgfnux", "prtkqylufbsxcwvaezjmhgfnfx", "prtkqyluibsdcdvaezjmhgxndx", "potkiyluibsocwvaezjmhkfndx", "prtkqyluiosocsvhezjmhgfndx", "prtkqyluibsocqbaezomhgfndx", "prtihyluibsocwvaeujmhgfndx", "prtuquruibsocwvaezjmhgfndx", "prtkqyloibsocwvaeztmhifndx", "ertuqyluibsocwvaeajmhgfndx"]

func areOneCharDifferent(str1: String, str2: String) -> Bool {
    var numCharsDifferent = 0

    for (c1, c2) in zip(str1, str2) {
        if (c1 != c2) {
            numCharsDifferent += 1

            if (numCharsDifferent >= 2) {
                return false
            }
        }
    }

    return numCharsDifferent == 1
}

func findMatchingPair(input: [String]) -> (String, String)? {
    for i in 0..<input.count {
        for j in i+1..<input.count {
            if areOneCharDifferent(str1: input[i], str2: input[j]) {
                return (input[i], input[j])
            }
        }
    }

    return nil
}

func getSameChars(strings: (String, String)) -> String {
    return String(zip(strings.0, strings.1).compactMap({(c1, c2) in c1 == c2 ? c1 : nil}))
}

let maybeMatchingPair = findMatchingPair(input: input)
if let matchingPair = maybeMatchingPair {
    print(getSameChars(strings: matchingPair))
}
